[main]
#authenticator
authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authenticator.authenticationStrategy=$authenticationStrategy
securityManager.authenticator=$authenticator
#authorizer
authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver=$permissionResolver
securityManager.authorizer=$authorizer
#realm
dataSource=com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql://localhost:3306/shiro
dataSource.username=root
#dataSource.password=123456
jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource=$dataSource
jdbcRealm.permissionsLookupEnabled=true
securityManager.realms=$jdbcRealm

# ini配置
# [main] 提供了对根对象securityManager及其依赖对象的配置
# 创建对象：
# securityManager=org.apache.shiro.mgt.DefaultSecurityManager 构造器必须是public空参构造器 通过反射创建相应实例
# 常量值setter注入：
# dataSource.driverClassName=com.mysql.jdbc.Driver
# jdbcRealm.permissionsLookupEnabled=true
# 对象引用setter注入：
# authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
# securityManager.authenticator=$authenticator
# 嵌套属性setter注入
# securityManager.authenticator.authenticationStrategy=$authenticationStrategy
# byte数组setter注入
# base64 byte[]（默认）：authenticator.bytes=aGVsbG8=
# hex byte[]：authenticator.bytes=0x68656c6c6f
# Array/Set/List setter注入
# authenticator.array=1,2,3
# authenticator.set=$jdbcRealm,$jdbcRealm  多个之间通过 “，” 分割
# Map setter注入
# authenticator.map=$jdbcRealm:$jdbcRealm,1:1,key:abc  格式为：map=key:value,key:value
# 实例化/注入顺序
# realm=Realm1 realm=Realm2  后边的覆盖前边的注入
# [users] 配置用户名 / 密码及其角色，格式：“用户名 = 密码，角色1，角色2”，角色部分可省略
# zhang=123,role1,role2
# wang=123
# [roles] 配置角色及权限之间的关系 格式：“角色 = 权限1,权限2
# role1=user:create,user:update
# role2=*
# [urls] 配置url及相应的拦截器之间的关系 格式：”url=拦截器[参数],拦截器[参数]
# /admin/**=authc,roles[admin],perms["permission1"]